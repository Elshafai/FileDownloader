# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'URL.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import requests

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1322, 657)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(610, 450, 191, 71))
        self.pushButton.setObjectName("pushButton")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(280, 150, 71, 41))
        self.label.setTextFormat(QtCore.Qt.RichText)
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(270, 250, 121, 41))
        self.label_2.setTextFormat(QtCore.Qt.RichText)
        self.label_2.setObjectName("label_2")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(490, 150, 391, 31))
        self.lineEdit.setObjectName("lineEdit")

        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(490, 260, 291, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(370, 370, 621, 41))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(790, 250, 131, 41))
        self.pushButton_2.setObjectName("pushButton_2")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1322, 21))
        self.menubar.setObjectName("menubar")

        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # إضافة أكواد CSS
        self.centralwidget.setStyleSheet("""
            QWidget { background-color: #f0f0f0; }
            QPushButton { background-color: #4CAF50; color: white; border: none; padding: 10px; }
            QPushButton:hover { background-color: #45a049; }
            QLabel { color: #333333; font-size: 16px; }
            QProgressBar { border: 2px solid #4CAF50; background-color: #e0e0e0; }
            QProgressBar::chunk { background-color: #4CAF50; }
        """)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "URL"))
        self.pushButton.setText(_translate("MainWindow", "Download"))
        self.label.setText(_translate("MainWindow", "URL"))
        self.label_2.setText(_translate("MainWindow", "Save Location"))
        self.pushButton_2.setText(_translate("MainWindow", "Browse"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))

class DownloadApp(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.download_location = ''
        self.ui.pushButton.clicked.connect(self.start_download)  # زر التنزيل
        self.ui.pushButton_2.clicked.connect(self.select_location)  # زر التصفح
        self.ui.progressBar.setValue(0)

    def select_location(self):
        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self, "Save File", "", options=options)
        if file_path:
            self.download_location = file_path
            self.ui.lineEdit_2.setText(file_path)  # تعيين المسار في حقل الإدخال

    def start_download(self):
        url = self.ui.lineEdit.text()  # حقل إدخال URL
        if not url or not self.download_location:
            QtWidgets.QMessageBox.warning(self, "Warning", "Please enter a URL and select a location to save the file.")
            return

        self.download_thread = DownloadThread(url, self.download_location)
        self.download_thread.progress.connect(self.update_progress)
        self.download_thread.finished.connect(self.download_finished)
        self.download_thread.start()

    def update_progress(self, value):
        self.ui.progressBar.setValue(value)

    def download_finished(self, success):
        if success:
            QtWidgets.QMessageBox.information(self, "Download Complete", "File downloaded successfully!")
        else:
            QtWidgets.QMessageBox.critical(self, "Error", "Failed to download the file.")
        self.ui.progressBar.setValue(0)

class DownloadThread(QtCore.QThread):
    progress = QtCore.pyqtSignal(int)
    finished = QtCore.pyqtSignal(bool)

    def __init__(self, url, location):
        super().__init__()
        self.url = url
        self.location = location

    def run(self):
        try:
            response = requests.get(self.url, stream=True)
            response.raise_for_status()
            total_length = int(response.headers.get('content-length', 0))
            with open(self.location, 'wb') as file:
                downloaded = 0
                for chunk in response.iter_content(chunk_size=1024):
                    if chunk:
                        file.write(chunk)
                        downloaded += len(chunk)
                        progress_percentage = int((downloaded / total_length) * 100)
                        self.progress.emit(progress_percentage)
            self.finished.emit(True)
        except Exception as e:
            print(f"Error occurred: {e}")
            self.finished.emit(False)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = DownloadApp()
    window.show()
    sys.exit(app.exec_())
